@model VB.Models.Vault
@{
    ViewData["Title"] = "Edit vault";
}

<div class="form-page">
    <div class="section-heading">
        <h1 class="section-heading-title">
            <i class="bi bi-pencil-square me-2"></i>
            Edit vault entry
        </h1>
        <a asp-action="Index" class="btn btn-outline-secondary">
            <i class="bi bi-arrow-left"></i>
            Back to vaults
        </a>
    </div>
    <div class="form-card">
        <form asp-action="Edit" novalidate>
            <div asp-validation-summary="ModelOnly" class="text-danger mb-4"></div>
            <input type="hidden" asp-for="Id" />

            <div class="row g-4">
                <div class="col-md-6">
                    <label asp-for="WebsiteName" class="form-label">Website name</label>
                    <input asp-for="WebsiteName" class="form-control" />
                    <span asp-validation-for="WebsiteName" class="text-danger"></span>
                </div>
                <div class="col-md-6">
                    <label asp-for="Url" class="form-label">URL</label>
                    <input asp-for="Url" class="form-control" />
                    <span asp-validation-for="Url" class="text-danger"></span>
                </div>
                <div class="col-md-6">
                    <label asp-for="Username" class="form-label">Username</label>
                    <input asp-for="Username" class="form-control" />
                    <span asp-validation-for="Username" class="text-danger"></span>
                </div>
                <div class="col-md-6">
                    <label asp-for="Email" class="form-label">Email</label>
                    <input asp-for="Email" class="form-control" />
                    <span asp-validation-for="Email" class="text-danger"></span>
                </div>
                <div class="col-12">
                    <label asp-for="Password" class="form-label">Password</label>
                    <div class="input-group"
                         data-password-tools
                         data-generate-url="@Url.Action("GeneratePassword", "Vaults")">
                        <input asp-for="Password"
                               class="form-control"
                               id="passwordInput"
                               type="password"
                               data-password-input />
                        <button type="button"
                                class="btn btn-outline-secondary"
                                data-password-action="toggle"
                                data-label-show="Show"
                                data-label-hide="Hide">Show</button>
                        <button type="button"
                                class="btn btn-outline-secondary"
                                data-password-action="copy"
                                data-label-default="Copy"
                                data-label-done="Copied!">Copy</button>
                        <button type="button"
                                class="btn btn-outline-primary"
                                data-password-action="generate"
                                data-label-default="Generate"
                                data-label-busy="Generating...">Generate</button>
                    </div>
                    <div class="form-text">Generating a new password will overwrite the current value after confirmation.</div>
                    <span asp-validation-for="Password" class="text-danger"></span>
                </div>
            </div>

            <div class="form-footer">
                <div class="text-muted small">Keep collaborators informed after changing a password that is actively shared.</div>
                <div class="d-flex gap-2">
                    <a asp-action="Index" class="btn btn-outline-secondary">
                        Cancel
                    </a>
                    <button type="submit" class="btn btn-primary">
                        Save changes
                    </button>
                </div>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        (function () {
            const passwordInput = document.querySelector('[data-password-input]');
            const generateBtn = document.querySelector('[data-password-action="generate"]');
            const toggleBtn = document.querySelector('[data-password-action="toggle"]');
            const copyBtn = document.querySelector('[data-password-action="copy"]');

            const toast = (icon, title) => {
                if (!title) return;
                if (window.Swal) {
                    Swal.fire({
                        toast: true,
                        position: 'top-end',
                        icon: icon || 'info',
                        title,
                        showConfirmButton: false,
                        timer: 1600,
                        timerProgressBar: true
                    });
                } else {
                    console.log(`[${icon || 'info'}] ${title}`);
                }
            };

            generateBtn?.addEventListener('click', async () => {
                if (!passwordInput) return;

                if (passwordInput.value) {
                    const confirmReplace = window.Swal
                        ? await Swal.fire({
                            icon: 'warning',
                            title: 'Replace password?',
                            text: 'Generating a new password will overwrite the current one.',
                            showCancelButton: true,
                            confirmButtonText: 'Replace'
                        }).then(r => r.isConfirmed)
                        : confirm('Generate a new password and overwrite the current value?');

                    if (!confirmReplace) {
                        return;
                    }
                }

                const original = generateBtn.textContent;
                try {
                    generateBtn.disabled = true;
                    generateBtn.textContent = generateBtn.dataset.labelBusy || 'Generating...';
                    const response = await fetch('@Url.Action("GeneratePassword", "Vaults")', {
                        headers: { 'X-Requested-With': 'XMLHttpRequest' }
                    });
                    if (!response.ok) throw new Error(`Request failed: ${response.status}`);
                    const payload = await response.json();
                    passwordInput.value = payload.password || '';
                    toast('success', 'Strong password generated');
                } catch (error) {
                    console.error('Generate password failed', error);
                    toast('error', 'Could not generate password');
                } finally {
                    generateBtn.disabled = false;
                    generateBtn.textContent = original;
                }
            });

            toggleBtn?.addEventListener('click', () => {
                if (!passwordInput) return;
                const showing = passwordInput.type === 'text';
                passwordInput.type = showing ? 'password' : 'text';
                toggleBtn.textContent = showing
                    ? (toggleBtn.dataset.labelShow || 'Show')
                    : (toggleBtn.dataset.labelHide || 'Hide');
            });

            copyBtn?.addEventListener('click', async () => {
                if (!passwordInput?.value) {
                    toast('info', 'No password to copy');
                    return;
                }

                const original = copyBtn.textContent;
                try {
                    if (navigator.clipboard?.writeText) {
                        await navigator.clipboard.writeText(passwordInput.value);
                    } else {
                        passwordInput.type = 'text';
                        passwordInput.select();
                        passwordInput.setSelectionRange(0, passwordInput.value.length);
                        document.execCommand('copy');
                        passwordInput.type = 'password';
                    }
                    copyBtn.textContent = copyBtn.dataset.labelDone || 'Copied!';
                    toast('success', 'Password copied');
                } catch (error) {
                    console.error('Copy failed', error);
                    toast('error', 'Unable to copy password');
                } finally {
                    setTimeout(() => {
                        copyBtn.textContent = original;
                    }, 1200);
                }
            });
        })();
    </script>
}